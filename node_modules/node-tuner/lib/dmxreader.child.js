const fs = require('fs');
const config = require('config');
const mkfifo = require("mkfifo").mkfifo;

const fd = parseInt(process.argv[2], 10);
const fifo = process.argv[3];

const ws = fs.createWriteStream(fifo);
let copy_ws;

// This is a copy from the stream
mkfifo("fifo-copy", parseInt('0600', 8), (err) => {
    console.log("Fifo copy created successfuly")
    copy_ws = fs.createWriteStream("fifo-copy");
});

console.log('Child running now using', fifo);

let stopped = 0;

function startStreaming() {
  if (stopped) return;
const buf = new Buffer(config.READ_BUFFER_SIZE);

//const buf = new Buffer(64860);
  fs.read(fd, buf, 0, buf.length, null,
    (err, _bytesRead, _buffer) => {
      if (err && err.code) {
        switch (err.code) {
          case 'Unknown system error -75':
          case 'EAGAIN':
            process.nextTick(startStreaming.bind(this));
            break;
          default:
            console.log('error', err.code);
            break;
        }
      }
      if (!_bytesRead) {
        setTimeout(startStreaming.bind(this), 25);
      } else {
        ws.write(_buffer);
		    copy_ws.write(_buffer);
        process.nextTick(startStreaming.bind(this));
      }
    });
}

process.on('message', (m) => {
  console.log('Child: got msg', m);
  if (m.action === 'start') {
    stopped = 0;
    process.send({
      code: 200,
    });
    startStreaming();
  }
  if (m.action === 'stop') {
    stopped = 1;
  }
});
